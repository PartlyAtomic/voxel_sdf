// xs_begin
// author : '@partlyatomic'
// arg : { name = 'Axis' var = 'm_axis' range = '1 3' value = '3' step = '1' precision = '1' }
// arg : { name = 'Width'  var = 'm_width'  range = '0 1024'  value = '5'  step = '1'  precision = '1' }
// arg : { name = 'Height'  var = 'm_height'  range = '0 1024'  value = '5'  step = '1'  precision = '1' }
// xs_end

/**********
 Begin helpers.txt
 These are helper functions for MagicaVoxel since #include doesn't seem to be a thing for glsl?
 **********/
float inner( float sd )
{
    return sd < 0;
}

float outer ( float sd )
{
    return sd > 0;
}

// Change the vec3 to be relative to the current selection volume
vec3 center_in_volume(vec3 v) 
{
    vec3 mid = i_volume_size/2.0;
    vec3 center = v-mid;
    return center;
}

vec2 get_plane(vec3 v, float axis)
{
    // 1 = X up, 2 = Y up, 3 = Z up
    switch(floor(axis))
    {
        case 1:
            return v.yz;
        case 2:
            return v.xz;
        case 3:
            return v.xy;
        default:
            return vec2(0.0);
    }
}

/**********
 End helpers.txt
 **********/

float sdBox(vec2 p, vec2 bounds)
{
    // Bounds seems to be treated as a radius so divide by 2
    bounds = bounds/2;

    vec2 d = abs(p) - bounds;
    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);
}

float map(vec3 v)
{
    vec3 center = center_in_volume(v);
    vec2 p = get_plane(center, m_axis);

    vec2 bounds = vec2(m_width, m_height);
    return inner(sdBox(p, bounds));
}