// xs_begin
// author : '@partlyatomic'
// arg : { name = 'Axis' var = 'm_axis' range = '1 3' value = '3' step = '1' precision = '1' }
// xs_end

/**********
 Begin helpers.txt
 These are helper functions for MagicaVoxel since #include doesn't seem to be a thing for glsl?
 **********/
float inner( float sd )
{
    return sd < 0;
}

float outer ( float sd )
{
    return sd > 0;
}

// Change the vec3 to be relative to the current selection volume
vec3 center_in_volume(vec3 v) 
{
    vec3 mid = i_volume_size/2.0;
    vec3 center = v-mid;
    return center;
}

vec2 get_plane(vec3 v, float axis)
{
    // 1 = X up, 2 = Y up, 3 = Z up
    switch(floor(axis))
    {
        case 1:
            return v.yz;
        case 2:
            return v.xz;
        case 3:
            return v.xy;
        default:
            return vec2(0.0);
    }
}

/**********
 End helpers.txt
 **********/

float ndot(vec2 a, vec2 b) { return a.x*b.x - a.y*b.y; }

float sdRhombus(vec2 p, vec2 b)
{
    // Bounds seems to be treated as a radius so divide by 2
    b = b/2;

    p = abs(p);
    float h = clamp(ndot(b-2.0*p, b)/dot(b, b), -1.0, 1.0);
    float d = length(p-0.5*b*vec2(1.0-h,1.0+h));
    return d * sign(p.x*b.y + p.y*b.x - b.x*b.y);
}

float map(vec3 v)
{
    vec3 center = center_in_volume(v);
    vec2 p = get_plane(center, m_axis);

    // Constrain to the bounds of the box on the chosen axis
    vec2 plane_bounds = get_plane(i_volume_size, m_axis);

    return inner(sdRhombus(p, plane_bounds));
}