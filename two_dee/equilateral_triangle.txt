// xs_begin
// author : '@partlyatomic'
// arg : { name = 'Axis' var = 'm_axis' range = '1 3' value = '3' step = '1' precision = '1' }
// arg : { name = 'Radius' var = 'm_radius' range = '0 256' value = '10' step = '1' precision = '1' }

// xs_end

/**********
 Begin helpers.txt
 These are helper functions for MagicaVoxel since #include doesn't seem to be a thing for glsl?
 **********/
float inner( float sd )
{
    return sd < 0;
}

float outer ( float sd )
{
    return sd > 0;
}

// Change the vec3 to be relative to the current selection volume
vec3 center_in_volume(vec3 v) 
{
    vec3 mid = i_volume_size/2.0;
    vec3 center = v-mid;
    return center;
}

vec2 get_plane(vec3 v, float axis)
{
    // 1 = X up, 2 = Y up, 3 = Z up
    switch(floor(axis))
    {
        case 1:
            return v.yz;
        case 2:
            return v.xz;
        case 3:
            return v.xy;
        default:
            return vec2(0.0);
    }
}

/**********
 End helpers.txt
 **********/

float sdEquilateralTriangle(  in vec2 p, in float r )
{
    const float k = sqrt(3.0);
    p.x = abs(p.x) - r;
    p.y = p.y + r/k;
    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;
    p.x -= clamp( p.x, -2.0*r, 0.0 );
    return -length(p)*sign(p.y);
}

float map(vec3 v)
{
    vec3 center = center_in_volume(v);
    vec2 p = get_plane(center, m_axis);

    return inner(sdEquilateralTriangle(p, m_radius));
}