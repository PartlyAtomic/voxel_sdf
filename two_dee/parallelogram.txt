// xs_begin
// author : '@partlyatomic'
// arg : { name = 'Axis' var = 'm_axis' range = '1 3' value = '3' step = '1' precision = '1' }
// arg : { name = 'Skew' var = 'm_skew' range = '-256 256' value = '10' step = '1' precision = '1' }
// arg : { name = 'Width' var = 'm_width' range = '-256 256' value = '10' step = '1' precision = '1' }
// arg : { name = 'Height' var = 'm_height' range = '-256 256' value = '10' step = '1' precision = '1' }

// xs_end

/**********
 Begin helpers.txt
 These are helper functions for MagicaVoxel since #include doesn't seem to be a thing for glsl?
 **********/
float inner( float sd )
{
    return sd < 0;
}

float outer ( float sd )
{
    return sd > 0;
}

// Change the vec3 to be relative to the current selection volume
vec3 center_in_volume(vec3 v) 
{
    vec3 mid = i_volume_size/2.0;
    vec3 center = v-mid;
    return center;
}

vec2 get_plane(vec3 v, float axis)
{
    // 1 = X up, 2 = Y up, 3 = Z up
    switch(floor(axis))
    {
        case 1:
            return v.yz;
        case 2:
            return v.xz;
        case 3:
            return v.xy;
        default:
            return vec2(0.0);
    }
}

/**********
 End helpers.txt
 **********/


float dot2(vec2 v) { return dot(v, v); }

float sdParallelogram(vec2 p, float wi, float he, float sk )
{
    vec2 e = vec2(sk,he);
    p = (p.y<0.0)?-p:p;
    vec2  w = p - e; w.x -= clamp(w.x,-wi,wi);
    vec2  d = vec2(dot(w,w), -w.y);
    float s = p.x*e.y - p.y*e.x;
    p = (s<0.0)?-p:p;
    vec2  v = p - vec2(wi,0); v -= e*clamp(dot(v,e)/dot(e,e),-1.0,1.0);
    d = min( d, vec2(dot(v,v), wi*he-abs(s)));
    return sqrt(d.x)*sign(-d.y);
}

float map(vec3 v)
{
    vec3 center = center_in_volume(v);
    vec2 p = get_plane(center, m_axis);

    return inner(sdParallelogram(p, m_width, m_height, m_skew));
}